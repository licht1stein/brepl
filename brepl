#!/usr/bin/env bb

(def version "1.3.0")

(require '[babashka.cli :as cli]
         '[clojure.java.io :as io]
         '[clojure.string :as str]
         '[bencode.core :as bencode]
         '[clojure.pprint :as pp]
         '[clojure.walk :as walk]
         '[cheshire.core :as json])

(import '[java.net Socket]
        '[java.io PushbackInputStream])

(def cli-spec
  {:e {:desc "Expression to evaluate (everything after -e is treated as code)"
       :ref "<expr>"}
   :f {:desc "File to load and execute"
       :ref "<file>"}
   :m {:desc "Raw nREPL message (EDN format)"
       :ref "<message>"
       :alias :message}
   :h {:desc "nREPL host"
       :ref "<host>"
       :default "localhost"
       :default-desc "localhost or BREPL_HOST"}
   :p {:desc "nREPL port (required - auto-detects from .nrepl-port or BREPL_PORT)"
       :ref "<port>"}
   :verbose {:desc "Show raw nREPL messages instead of parsed output"}
   :version {:desc "Show brepl version"}
   :help {:desc "Show this help message"
          :alias :?}
   :hook {:desc "Output Claude Code hook-compatible JSON format"}})

(defn print-help []
  (println "brepl - Fast Babashka nREPL client for one-shot code evaluation")
  (println)
  (println "USAGE:")
  (println "    brepl [OPTIONS] -e <expr>")
  (println "    brepl [OPTIONS] -f <file>")
  (println "    brepl [OPTIONS] -m <message>")
  (println)
  (println "OPTIONS:")
  (println (cli/format-opts {:spec cli-spec :order [:e :f :m :h :p :verbose :version :help]}))
  (println)
  (println "PORT RESOLUTION:")
  (println "    Port is resolved in the following order:")
  (println "    1. -p <port> command line argument")
  (println "    2. .nrepl-port file:")
  (println "       - For -f: searches from file's directory upward to find project-specific port")
  (println "       - For -e/-m: uses .nrepl-port in current directory")
  (println "    3. BREPL_PORT environment variable")
  (println "    4. Error if none found")
  (println)
  (println "EXAMPLES:")
  (println "    brepl -e '(+ 1 2 3)'")
  (println "    brepl -f script.clj")
  (println "    brepl -m '{\"op\" \"describe\"}'")
  (println "    brepl -p 7888 -e '(println \"Hello\")'")
  (println "    BREPL_PORT=7888 brepl -e '(+ 1 2)'"))

(defn read-nrepl-port []
  (when (.exists (io/file ".nrepl-port"))
    (-> (slurp ".nrepl-port")
        str/trim
        Integer/parseInt)))

(defn find-nrepl-port-in-parents
  "Search for .nrepl-port file starting from the given directory and walking up the directory tree.
  Returns the port number from the first .nrepl-port file found, or nil if none found."
  [start-dir]
  (loop [dir (io/file start-dir)]
    (when dir
      (let [port-file (io/file dir ".nrepl-port")]
        (if (.exists port-file)
          (let [port (try
                       (-> (slurp port-file)
                           str/trim
                           Integer/parseInt)
                       (catch Exception e
                         ;; If we can't parse the port file, continue searching
                         nil))]
            (if port
              port
              (recur (.getParentFile dir))))
          (recur (.getParentFile dir)))))))

(defn get-env-var [var-name]
  (System/getenv var-name))

(defn resolve-host [cli-host]
  (or cli-host (get-env-var "BREPL_HOST") "localhost"))

(defn resolve-port 
  "Resolve the nREPL port from various sources.
  Priority: CLI arg > .nrepl-port file > BREPL_PORT env var
  When file-path is provided (for -f option), searches for .nrepl-port 
  starting from the file's directory and walking up the tree."
  ([cli-port] (resolve-port cli-port nil))
  ([cli-port file-path]
   (or cli-port
       (if file-path
         ;; For -f option: search from file's directory upward
         (let [file (io/file file-path)
               parent-dir (.getParentFile file)]
           (when parent-dir
             (find-nrepl-port-in-parents parent-dir)))
         ;; For -e and -m options: use current directory
         (read-nrepl-port))
       (when-let [env-port (get-env-var "BREPL_PORT")]
         (Integer/parseInt env-port)))))

(defn validate-args [opts]
  (when (:help opts)
    (print-help)
    (System/exit 0))

  (when (:version opts)
    (println (str "brepl " version))
    (System/exit 0))

  (let [has-expr (contains? opts :e)
        has-file (contains? opts :f)
        has-message (contains? opts :m)
        option-count (count (filter identity [has-expr has-file has-message]))]
    (cond
      (> option-count 1)
      (do (println "Error: Cannot specify multiple options (-e, -f, -m) together")
          (println)
          (print-help)
          (System/exit 1))

      (= option-count 0)
      (do (println "Error: Must specify one of -e EXPR, -f FILE, or -m MESSAGE")
          (println)
          (print-help)
          (System/exit 1))

      (and has-file (not (.exists (io/file (:f opts)))))
      (do (println "Error: File does not exist:" (:f opts))
          (System/exit 1)))))

;; nREPL client implementation
(defn bytes->str [x]
  (if (bytes? x) (String. x) x))

(defn convert-bytes-in-map [m]
  (walk/postwalk
   (fn [x]
     (if (bytes? x)
       (String. x)
       x))
   m))

(defn send-eval-message [host port code opts]
  (let [socket (Socket. host port)
        out (.getOutputStream socket)
        in (PushbackInputStream. (.getInputStream socket))
        msg-id (str (System/currentTimeMillis))
        msg {"op" "eval"
             "code" (str code)
             "id" msg-id}]

    ;; Print client message in verbose mode
    (when (:verbose opts)
      (pp/pprint msg))

    (bencode/write-bencode out msg)
    (.flush out)

    ;; Collect all response messages until we get "done" status
    (loop [responses []]
      (let [response (bencode/read-bencode in)
            ;; Print each response immediately in verbose mode
            _ (when (:verbose opts)
                (pp/pprint (convert-bytes-in-map response)))
            status (get response "status")
            status-strs (when status
                          (if (coll? status)
                            (map #(if (bytes? %) (String. %) %) status)
                            [(if (bytes? status) (String. status) status)]))]
        (if (and status-strs (some #(= % "done") status-strs))
          (do
            (.close socket)
            (if (:verbose opts)
              responses ; Return empty since we already printed
              (conj responses response)))
          (recur (if (:verbose opts)
                   responses ; Don't accumulate in verbose mode
                   (conj responses response))))))))

(defn process-eval-responses [responses]
  (let [combined {:out []
                  :err []
                  :values []
                  :ex nil
                  :status []}]
    (reduce (fn [acc resp]
              (cond-> acc
                (get resp "out") (update :out conj (bytes->str (get resp "out")))
                (get resp "err") (update :err conj (bytes->str (get resp "err")))
                (get resp "value") (update :values conj (bytes->str (get resp "value")))
                (get resp "ex") (assoc :ex (bytes->str (get resp "ex")))
                (get resp "status") (update :status into
                                            (map bytes->str
                                                 (if (coll? (get resp "status"))
                                                   (get resp "status")
                                                   [(get resp "status")])))))
            combined
            responses)))

(defn format-hook-response [processed has-error?]
  (if has-error?
    ;; Format error response with detailed information
    (let [;; Build comprehensive error details
          error-parts (cond-> []
                        ;; Include exception info
                        (:ex processed)
                        (conj (str "Exception: " (:ex processed)))

                        ;; Include stderr output
                        (seq (:err processed))
                        (concat (map #(str "Error: " %) (:err processed))))

          ;; Include stdout if no other error info
          error-parts (if (and (empty? error-parts) (seq (:out processed)))
                        (concat error-parts (map #(str "Output: " %) (:out processed)))
                        error-parts)

          ;; Create main error message
          error-msg (if (seq error-parts)
                      (str/join " | " error-parts)
                      "Evaluation error occurred")

          ;; Build detailed reason with all available info
          reason-parts (cond-> []
                         (:ex processed)
                         (conj (:ex processed))

                         (seq (:err processed))
                         (concat (:err processed))

                         (seq (:out processed))
                         (concat (:out processed)))

          reason-msg (if (seq reason-parts)
                       (str "Code evaluation failed:\n" (str/join "\n" reason-parts))
                       "Code contains errors that must be fixed")]

      {:continue false
       :stopReason error-msg
       :suppressOutput true
       :decision "block"
       :reason reason-msg})

    ;; Success response
    {:continue true
     :suppressOutput true}))

(defn eval-expression [host port code opts]
  (try
    (let [responses (send-eval-message host port code opts)]

      ;; Process responses to check for errors even in verbose mode
      (let [processed (process-eval-responses responses)
            has-error? (or (:ex processed)
                           (some #{"eval-error"} (flatten (:status processed))))]

        ;; If hook mode, return processed data
        (if (:hook opts)
          {:processed processed
           :has-error? has-error?}

          ;; Otherwise handle output normally
          (do
            ;; If verbose mode, responses were already printed
            (if (:verbose opts)
              has-error? ; Just return error status

              ;; Otherwise print output normally
              (do
                ;; Print stdout output
                (doseq [out (:out processed)]
                  (print out))

                ;; Print stderr output to stderr
                (doseq [err (:err processed)]
                  (binding [*out* *err*]
                    (print err)
                    (flush)))

                ;; Print evaluation results
                (doseq [val (:values processed)]
                  (println val))

                ;; Handle exceptions
                (when (:ex processed)
                  (binding [*out* *err*]
                    (println "Exception:" (:ex processed))))

                ;; Handle empty response
                (when (and (empty? (:values processed))
                           (empty? (:out processed))
                           (empty? (:err processed))
                           (not (:ex processed)))
                  (when (some #{"eval-error"} (flatten (:status processed)))
                    (binding [*out* *err*]
                      (println "Evaluation error occurred"))))

                ;; Return error status
                has-error?))))))

    (catch Exception e
      (if (:hook opts)
        {:processed {:ex (str "Connection error: " (.getMessage e))}
         :has-error? true}
        (do
          (println "Error connecting to nREPL server at" (str host ":" port))
          (println (.getMessage e))
          (System/exit 1))))))

(defn load-file [host port file-path opts]
  (let [code (slurp file-path)]
    (eval-expression host port code opts)))

(defn send-raw-message [host port message-str opts]
  (try
    (let [socket (Socket. host port)
          out (.getOutputStream socket)
          in (PushbackInputStream. (.getInputStream socket))
          ;; Parse the EDN message and add an ID if not present
          msg (read-string message-str)
          msg-with-id (if (get msg "id")
                        msg
                        (assoc msg "id" (str (System/currentTimeMillis))))]

      ;; Print client message in verbose mode
      (when (:verbose opts)
        (pp/pprint msg-with-id))

      (bencode/write-bencode out msg-with-id)
      (.flush out)

      ;; Collect all response messages until we get "done" status or no status
      (loop [responses []
             timeout-count 0]
        (let [response (bencode/read-bencode in)
              ;; Print each response immediately in verbose mode
              _ (when (:verbose opts)
                  (pp/pprint (convert-bytes-in-map response)))
              status (get response "status")
              status-strs (when status
                            (if (coll? status)
                              (map #(if (bytes? %) (String. %) %) status)
                              [(if (bytes? status) (String. status) status)]))]
          (cond
            ;; If we have a done status, we're finished
            (and status-strs (some #(= % "done") status-strs))
            (do
              (.close socket)
              (if (:verbose opts)
                responses ; Return empty since we already printed
                (conj responses response)))

            ;; For operations that don't return "done", stop after reasonable response count
            (> timeout-count 10)
            (do
              (.close socket)
              responses)

            ;; Otherwise keep reading
            :else
            (recur (if (:verbose opts)
                     responses ; Don't accumulate in verbose mode
                     (conj responses response))
                   (inc timeout-count))))))

    (catch Exception e
      (println "Error sending message to nREPL server at" (str host ":" port))
      (println (.getMessage e))
      (System/exit 1))))

(defn process-raw-message [host port message-str opts]
  (let [responses (send-raw-message host port message-str opts)]
    ;; In verbose mode, everything was already printed
    (when-not (:verbose opts)
      ;; Pretty print each response
      (doseq [resp responses]
        (pp/pprint (convert-bytes-in-map resp))))))

(defn -main [& args]
  ;; Special handling for -e flag to treat everything after it as Clojure code
  (let [args-vec (vec args)
        e-index (.indexOf args-vec "-e")
        ;; If -e is found and there are args after it, reconstruct the expression
        [args expr] (if (and (>= e-index 0) (< (inc e-index) (count args-vec)))
                      (let [before-e (take e-index args-vec)
                            after-e (drop (inc e-index) args-vec)
                            ;; Join all args after -e with spaces to form the expression
                            expr-str (str/join " " after-e)
                            ;; Reconstruct args with the joined expression
                            new-args (vec (concat before-e ["-e" expr-str]))]
                        [new-args expr-str])
                      [args nil])
        opts (cli/parse-opts args {:spec cli-spec})
        ;; Use the reconstructed expression if available
        opts (if expr (assoc opts :e expr) opts)
        host (resolve-host (:h opts))
        port (resolve-port (:p opts) (:f opts))]

    (validate-args opts)

    (when-not port
      (println "Error: No port specified, no .nrepl-port file found, and BREPL_PORT not set")
      (System/exit 1))

    (let [result (cond
                   (:e opts) (eval-expression host port (:e opts) opts)
                   (:f opts) (load-file host port (:f opts) opts)
                   (:m opts) (do (process-raw-message host port (:m opts) opts)
                                 false))] ; raw messages don't track errors

      ;; Handle hook mode
      (if (:hook opts)
        (let [{:keys [processed has-error?]} result
              hook-response (format-hook-response processed has-error?)]
          (println (json/generate-string hook-response))
          (System/exit (if has-error? 2 0)))

        ;; Regular mode - for backward compatibility, use exit code 2 for eval errors
        (when result
          (System/exit 2))))))

(when (= *file* (System/getProperty "babashka.file"))
  (apply -main *command-line-args*))
